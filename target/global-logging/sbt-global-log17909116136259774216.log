[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\krisj\AppData\Local\Temp\idea8.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\krisj\AppData\Local\Temp\idea8.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 20.0.1)
[debug]       Load.loadUnit: plugins took 103.5404ms
[debug]       Load.loadUnit: defsScala took 0.2604ms
[debug] [Loading] Scanning directory C:\Users\krisj\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\krisj\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.4803 ms
[debug]           Load.resolveProject(global-plugins) took 48.2733ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\krisj\.sbt\1.0\plugins, plugins: List(<none>))) took 86.2567ms
[debug] [Loading] Done in C:\Users\krisj\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 108.2885ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6034ms
[debug]     Load.loadUnit(file:/C:/Users/krisj/.sbt/1.0/plugins/, ...) took 220.8959ms
[debug]   Load.apply: load took 422.6064ms
[debug]   Load.apply: resolveProjects took 5.749ms
[debug]   Load.apply: finalTransforms took 62.1892ms
[debug]   Load.apply: config.delegates took 8.5243ms
[debug]   Load.apply: Def.make(settings)... took 428.1314ms
[debug]   Load.apply: structureIndex took 120.5176ms
[debug]   Load.apply: mkStreams took 1.8307ms
[info] loading global plugins from C:\Users\krisj\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2245.4973ms
[debug]           Load.loadUnit: plugins took 17.1518ms
[debug]           Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory F:\JetBrains Projects\Java\hydra_broken_marshalling\project
[debug]             Load.loadUnit: mkEval took 3.7437ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in F:\JetBrains Projects\Java\hydra_broken_marshalling\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.0357 ms
[info] loading settings for project hydra_broken_marshalling-build from plugins.sbt,scalapb.sbt,idea8.sbt ...
[debug]               Load.resolveProject(hydra_broken_marshalling-build) took 2.3724ms
[debug]             Load.loadTransitive: finalizeProject(Project(id hydra_broken_marshalling-build, base: F:\JetBrains Projects\Java\hydra_broken_marshalling\project, plugins: List(<none>))) took 4.8812ms
[debug] [Loading] Done in F:\JetBrains Projects\Java\hydra_broken_marshalling\project, returning: (hydra_broken_marshalling-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1930.5798ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.0205ms
[debug]         Load.loadUnit(file:/F:/JetBrains%20Projects/Java/hydra_broken_marshalling/project/, ...) took 1954.4537ms
[debug]       Load.apply: load took 1955.894ms
[debug]       Load.apply: resolveProjects took 0.1394ms
[debug]       Load.apply: finalTransforms took 12.1315ms
[debug]       Load.apply: config.delegates took 0.3635ms
[debug]       Load.apply: Def.make(settings)... took 71.1594ms
[debug]       Load.apply: structureIndex took 28.6564ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from F:\JetBrains Projects\Java\hydra_broken_marshalling\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3197.7695ms
[debug]     Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory F:\JetBrains Projects\Java\hydra_broken_marshalling
[debug]       Load.loadUnit: mkEval took 0.1404ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(spray.revolver.RevolverPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtprotoc.ProtocPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(spray.revolver.RevolverPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtprotoc.ProtocPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,org.portablescala.sbtplatformdeps.PlatformDepsPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtprotoc.ProtocPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,spray.revolver.RevolverPlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.9985 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 47.9296ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: F:\JetBrains Projects\Java\hydra_broken_marshalling, plugins: List(<none>))) took 51.6744ms
[debug] [Loading] Done in F:\JetBrains Projects\Java\hydra_broken_marshalling, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1363.7235ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.718ms
[debug]   Load.loadUnit(file:/F:/JetBrains%20Projects/Java/hydra_broken_marshalling/, ...) took 4570.9065ms
[debug] Load.apply: load took 4572.3969ms
[debug] Load.apply: resolveProjects took 0.081ms
[debug] Load.apply: finalTransforms took 25.5494ms
[debug] Load.apply: config.delegates took 0.3156ms
[debug] Load.apply: Def.make(settings)... took 65.5235ms
[debug] Load.apply: structureIndex took 24.6555ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to hydra_broken_marshalling (in build file:/F:/JetBrains%20Projects/Java/hydra_broken_marshalling/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57088 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57088, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to hydra_broken_marshalling (in build file:/F:/JetBrains%20Projects/Java/hydra_broken_marshalling/)
[debug] > Exec(idea-shell, None, None)
